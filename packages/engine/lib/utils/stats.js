// Generated by CoffeeScript 2.5.1
var constants;

module.exports = {
  new: function(stat) {
    var Stats;
    Stats = function(stat) {
      this.mode = stat && stat.mode;
      this.uid = stat && stat.uid;
      this.gid = stat && stat.gid;
      this.size = stat && stat.size;
      this.atime = stat && stat.atime;
      return this.mtime = stat && stat.mtime;
    };
    Stats.prototype._checkModeProperty = function(property) {
      return (this.mode & constants.S_IFMT) === property;
    };
    Stats.prototype.isDirectory = function() {
      return this._checkModeProperty(constants.S_IFDIR);
    };
    Stats.prototype.isFile = function() {
      return this._checkModeProperty(constants.S_IFREG);
    };
    Stats.prototype.isBlockDevice = function() {
      return this._checkModeProperty(constants.S_IFBLK);
    };
    Stats.prototype.isCharacterDevice = function() {
      return this._checkModeProperty(constants.S_IFCHR);
    };
    Stats.prototype.isSymbolicLink = function() {
      return this._checkModeProperty(constants.S_IFLNK);
    };
    Stats.prototype.isFIFO = function() {
      return this._checkModeProperty(constants.S_IFIFO);
    };
    Stats.prototype.isSocket = function() {
      return this._checkModeProperty(constants.S_IFSOCK);
    };
    return new Stats(stat);
  },
  isDirectory: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFDIR;
  },
  isFile: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFREG;
  },
  isBlockDevice: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFBLK;
  },
  isCharacterDevice: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFCHR;
  },
  isSymbolicLink: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFLNK;
  },
  isFIFO: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFIFO;
  },
  isSocket: function(mode) {
    return (mode & constants.S_IFMT) === constants.S_IFSOCK;
  },
  type: function(mode) {
    if (this.isDirectory(mode)) {
      return 'Directory';
    } else if (this.isFile(mode)) {
      return 'File';
    } else if (this.isBlockDevice(mode)) {
      return 'Block Device';
    } else if (this.isCharacterDevice(mode)) {
      return 'Character Device';
    } else if (this.isSymbolicLink(mode)) {
      return 'Symbolic Link';
    } else if (this.isFIFO(mode)) {
      return 'FIFO';
    } else if (this.isSocket(mode)) {
      return 'Socket';
    } else {
      return 'Unknown';
    }
  }
};

//# Dependencies
constants = require('fs').constants;
