// Generated by CoffeeScript 2.5.1
var EventEmitter, path, stackTrace;

({EventEmitter} = require('events'));

stackTrace = require('stack-trace');

path = require('path');

module.exports = function() {
  return {
    module: '@nikitajs/engine/src/plugins/log',
    require: '@nikitajs/engine/src/plugins/events',
    hooks: {
      'nikita:session:action': {
        after: '@nikitajs/engine/src/plugins/events',
        handler: function(action) {
          return action.log = function(log) {
            var frame, msg, ref, ref1, ref2, ref3, ref4;
            if (typeof log === 'string') {
              log = {
                message: log
              };
            }
            if (log.level == null) {
              log.level = 'INFO';
            }
            if (log.time == null) {
              log.time = Date.now();
            }
            if (log.index == null) {
              log.index = action.metadata.index;
            }
            if (log.module == null) {
              log.module = action.metadata.module;
            }
            if (log.namespace == null) {
              log.namespace = action.metadata.namespace;
            }
            if (log.type == null) {
              log.type = 'text';
            }
            log.depth = action.metadata.depth;
            log.metadata = action.metadata;
            log.config = action.config;
            frame = stackTrace.get()[1];
            log.filename = frame.getFileName();
            log.file = path.basename(frame.getFileName());
            log.line = frame.getLineNumber();
            if (action.metadata.debug) {
              if ((ref = log.type) === 'text' || ref === 'stdin' || ref === 'stdout_stream' || ref === 'stderr_stream') {
                if (!(((ref1 = log.type) === 'stdout_stream' || ref1 === 'stderr_stream') && log.message === null)) {
                  msg = typeof log.message === 'string' ? log.message.trim() : typeof log.message === 'number' ? log.message : ((ref2 = log.message) != null ? ref2.toString : void 0) != null ? log.message.toString().trim() : JSON.stringify(log.message);
                  msg = `[${log.depth}.${log.level} ${log.module}] ${msg}`;
                  msg = (function() {
                    switch (log.type) {
                      case 'stdin':
                        return `\x1b[33m${msg}\x1b[39m`;
                      case 'stdout_stream':
                        return `\x1b[36m${msg}\x1b[39m`;
                      case 'stderr_stream':
                        return `\x1b[35m${msg}\x1b[39m`;
                      default:
                        return `\x1b[32m${msg}\x1b[39m`;
                    }
                  })();
                  if (action.metadata.debug === 'stdout') {
                    process.stdout.write(`${msg}\n`);
                  } else {
                    process.stderr.write(`${msg}\n`);
                  }
                }
              }
            }
            if (typeof action.metadata.log === 'function') {
              if ((ref3 = action.metadata) != null) {
                ref3.log(log);
              }
            } else {
              if (((ref4 = action.metadata) != null ? ref4.log : void 0) === false) {
                return;
              }
            }
            return action.operations.events.emit(log.type, log, action);
          };
        }
      }
    }
  };
};
